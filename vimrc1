" %%' old conf
" syntax on
" syntax enable
" filetype plugin on
" filetype plugin indent on
"
" set nocompatible                " be iMproved
" " filetype off                    " required!
" filetype on                    " required!
" set rtp+=~/.vim/bundle/vundle/
" call vundle#rc()
"
" colorscheme murphy
" lcd /home         " 设置默认目录
" set autochdir
" set encoding=utf-8 fileencodings=ucs-bom,utf-8,cp936
" set tabstop=4
" set softtabstop=4
" set shiftwidth=4
" set autoindent
" set cindent
" set number
" set nobackup
" " 显示特殊字符，其中Tab使用高亮竖线代替，尾部空白使用高亮点号代替
" set list
" set listchars=tab:\|\ ,trail:.
" " 将Tab自动转化成空格 [需要输入真正的Tab键时，使用 Ctrl+V + Tab]
" set expandtab
" " 允许backspace和光标键跨越行边界
" set whichwrap+=<,>,h,l
" " 背景设置
" " set background=dark
" set background=light
" " 增强模式中的命令行自动完成操作
" set wildmenu
" set hlsearch
" " set guifont=Fixedsys
" " set iskeyword+=_,$,@,%,#,-
"
" " taglist setting
" let Tlist_Show_One_File = 1
" let Tlist_Exit_OnlyWindow = 1
" let Tlist_Use_Right_Window = 1
" let Tlist_Close_On_Select = 1
" let Tlist_Enable_Fold_Column = 0
" let Tlist_GainFocus_On_ToggleOpen = 1
" let Tlist_Display_Prototype = 1
" set tags=./tags;../tags;../../tags;../../../tags
"
" "-- omnicppcomplete setting --
" set completeopt=menu,menuone
" let OmniCpp_MayCompleteDot = 1 " autocomplete with .
" let OmniCpp_MayCompleteArrow = 1 " autocomplete with ->
" let OmniCpp_MayCompleteScope = 1 " autocomplete with ::
" let OmniCpp_SelectFirstItem = 2 " select first item (but don't insert)
" let OmniCpp_NamespaceSearch = 2 " search namespaces in this and included files
" let OmniCpp_ShowPrototypeInAbbr = 1 " show function prototype  in popup window
" let OmniCpp_GlobalScopeSearch=1
" let OmniCpp_DisplayMode=1
" let OmniCpp_DefaultNamespaces=["std"]
"
" " 窗口切换快捷键
" nmap <c-j> <c-w>j
" nmap <c-k> <c-w>k
" nmap <c-h> <c-w>h
" nmap <c-l> <c-w>l
"
" " 在插入模式下移动光标
" inoremap <C-b> <Left>
" inoremap <C-f> <Right>
"
" " 设置底部状态栏显示
" set statusline=%20*\%f%h%=%-14.(%l,%c%V%)\ %<%p%%\ \ \ [%L]\ \ \ %{strftime('%y-%m-%d\ %A')}
"
" " 重新打开文件,光标停留在上次编辑的地方
" au BufReadPost * if line("'\"") > 0|if line("'\"") <= line("$")|exe("norm '\"")|else|exe "norm $"|endif|endif
"
" au BufWinEnter * let w:m1=matchadd('Underlined', '\%<81v.\%>77v',-1)
"
" " 在保存文件时自动去除无效空白，包括行尾空白和文件最后的空行
" function RemoveTrailingWhitespace()
"     if &ft != "diff"
"         let b:curcol = col(".")
"         let b:curline = line(".")
"         silent! %s/\s\+$//
"         silent! %s/\(\s*\n\)\+\%$//
"         call cursor(b:curline, b:curcol)
"     endif
" endfunction
" autocmd BufWritePre * call RemoveTrailingWhitespace()
"
" " vundle git sourse
" Bundle 'https://github.com/onlychoice/vimerl.git'
" Bundle 'https://github.com/vim-scripts/The-NERD-tree.git'
" Bundle 'https://github.com/vim-scripts/taglist.vim.git'
" Bundle 'https://github.com/vim-scripts/c.vim.git'
" Bundle 'https://github.com/fugalh/desert.vim.git'
" Bundle 'https://github.com/szw/vim-tags.git'
" Bundle 'https://github.com/vim-scripts/OmniCppComplete.git'
" Bundle 'https://github.com/vim-scripts/AutoComplPop.git'
" Bundle 'https://github.com/vim-scripts/TxtBrowser.git'
" Bundle 'https://github.com/vim-scripts/a.vim.git'
" Bundle 'https://github.com/vim-scripts/nocompatible.vim.git'
" %%.

"=============================================================
"%%' @doc 基础配置
"=============================================================
set nocompatible                " 禁用Vi兼容模式,不要使用vi的键盘模式,而是vim自己的

filetype on                     " 侦测文件类型
filetype plugin on              " 载入文件类型插件
filetype indent on              " 为特定文件类型载入相关缩进文件
filetype plugin indent on       " 启用自动补全

set completeopt=preview,menu    " 代码补全
" set completeopt=longest,menu  " 智能补全

set autoread                    " 设置当文件被改动时自动载入
set autochdir                   " 自动目录
" set autowrite                 " 自动保存

" colorscheme desert              " 配色方案
colors murphy                 " 配色方案
" color desert                  " 设置背景主题

" set cursorline                  " 突出显示当前行
" set cursorcolumn                " 高亮纵向行
" set cul                         " 高亮光标所在行
" set cuc                         " 高亮光标所在行
" autocmd InsertLeave * se nocul" 用浅色高亮当前行
" autocmd InsertEnter * se cul    " 用浅色高亮当前行
autocmd GUIEnter * simalt ~x    " 窗口启动时自动最大化

set hlsearch                    " 高亮搜索
set incsearch                   " 在输入要搜索的文字时，实时匹配
set nowrapscan                  " 搜索到文件两端时不重新搜索
set ignorecase                  " 搜索模式里忽略大小写
set smartcase                   " 如果搜索模式包含大写字符,不使用 'ignorecase' 选项 \
                                " ,只有在输入搜索模式并且打开 'ignorecase' 选项时才会使用
" set noincsearch               " 在输入要搜索的文字时,取消实时匹配

set tabstop=4                   " Tab键的宽度
set softtabstop=4               " 统一缩进为4
set shiftwidth=4                " 统一缩进为4
set autoindent                  " 自动缩进
set cindent                     " 自动缩进
set smartindent                 " 启用智能对齐方式
set smarttab                    " 在行和段开始处使用制表符
set list                        " 显示特殊字符,其中Tab使用高亮竖线代替,尾部空白使用高亮点号代替
set listchars=tab:\|\ ,trail:.  " 显示特殊字符,其中Tab使用高亮竖线代替,尾部空白使用高亮点号代替
set expandtab                   " 将Tab自动转化成空格 [需要输入真正的Tab键时，使用 Ctrl+V + Tab]
set whichwrap+=<,>,h,l          " 允许backspace和光标键跨越行边界
set mouse=a                     " 在任何模式下启用鼠标
set clipboard+=unnamed          " 共享剪贴板
set nobackup                    " 设置无备份文件
set wildmenu                    " 命令行自动完成
set shortmess=atI               " 启动的时候不显示那个援助乌干达儿童的提示
set go=                         " 不要图形按钮
set guifont=Fixedsys            " 设置字体
set ruler                       " 显示标尺
set showcmd                     " 输入的命令显示出来,看的清楚些
set laststatus=2                " 启动显示状态行(1),总是显示状态行(2)
set cmdheight=1                 " 总是显示状态行
set number                      " 显示行号
set history=1000                " 历史记录数
set viminfo+=!                  " 保存全局变量
set iskeyword+=_,$,@,%,#,-      " 带有如下符号的单词不要被换行分割
set foldenable                  " 开启折叠
set foldmethod=manual           " 手动折叠
set background=light
" set background=dark
" set foldmethod=indent         " indent 折叠方式
" set foldmethod=marker         " marker 折叠方式
" set nowrap                    " 不自动换行
" set noswapfile                " 禁止产生临时swp文件
" set writebackup               " 保存文件前建立备份,保存成功后删除该备份
" set linebreak                 " 在空白或符号位置折行
" set scrolloff=3               " 光标移动到buffer的顶部和底部时保持3行距离
" set noeb                      " 去掉输入错误的提示声音
" set confirm                   " 在处理未保存或只读文件的时候,弹出确认
" set cinoptions={0,1s,t0,n-2,p2s,(03s,=.5s,>1s,=1s,:1s  " 设置C/C++语言的具体缩进方式

"=============================================================
"%%. @end 基础配置
"=============================================================

"=============================================================
"%%' @doc 自定义快捷键和配置
"=============================================================
" lcd D:/code/hxjq         " 设置GVIM默认目录
" nmap ;ll :NERDTreeToggle D:\code\work\myserver<CR>
" nmap ;lw :NERDTree       D:\code\work\<CR>
" nmap ;ls :NERDTree       D:\code\work\myserver\src<CR>
" nmap ;lm :NERDTree       D:\code\work\myserver<CR>
" nmap ;li :NERDTree       D:\code\work\myserver\include<CR>
" nmap ;lo :NERDTree       D:\code\centos<CR>
" nmap ;le :NERDTree       D:\code\erlang<CR>
" nmap ;lt :NERDTree       D:\code\hxjq<CR>
nmap ;ln :NERDTreeMirror<CR>
nmap ;me :!make.bat<CR>
nmap ;st :!start_cc.bat<CR>
nmap ;cc :!commit_code.bat<CR>
nmap ;cd :!commit_doc.bat<CR>
nmap ;uu :!update.bat<CR>
nmap ;dd :!download_data.bat<CR>
nmap ;d1 :!download_data1.bat<CR>
nmap ;vim :e ~/.vimrc<CR>
nmap ;tn :tabn<CR>
nmap ;tp :tabp<CR>
nmap ;tl :tabl<CR>
nmap ;tl :tabl<CR>
nmap ;te :tabe<CR>
nmap ;tc :tabc<CR>
nmap ;tf :tabfir<CR>
nmap ;bs :buffers<CR>
nmap ;bn :bn<CR>
nmap ;bp :bp<CR>
nmap ;bd :bd<CR>
nmap ;no :nohl<CR>
nmap ;tag :TlistToggle<CR>
nmap ;sv :source ~/.vimrc<CR>

" 定义<F11>开启/关闭窗口最大化
nmap <F11> <Esc>:call libcallnr("gvimfullscreen.dll", "ToggleFullScreen", 0)<CR>
" 定义<F3>开启/关闭行号显示
nmap <F3> :set nonumber!<CR>:set foldcolumn=0<CR>
" 定义<F2>开启/关闭NERDTree
nmap <F2> :NERDTree<CR>

" 窗口切换快捷键
nmap <c-j> <c-w>j
nmap <c-k> <c-w>k
nmap <c-h> <c-w>h
nmap <c-l> <c-w>l

" ;16  十六进制格式查看
" ;r16 返回普通格式
nmap ;16 :%!xxd<CR>
nmap ;r16 :%!xxd -r<CR>

" 设置底部状态栏显示
set statusline=%f%m%r%h%w\ %h%=%-14.(%l,%c%V%)\ %<%p%%\ \ \ [%L]\ \ \ %{strftime('%y-%m-%d\ %A')}
" 设置底部状态栏显示
" set statusline=%F%m%r%h%w\ [FORMAT=%{&ff}]\ [TYPE=%Y]\ [POS=%l,%v][%p%%]\ %{strftime(\"%d/%m/%y\ -\ %H:%M\")}

" 重新打开文件,光标停留在上次编辑的地方
au BufReadPost * if line("'\"") > 0|if line("'\"") <= line("$")|exe("norm '\"")|else|exe "norm $"|endif|endif

" 启用每行超过77-80列的字符提示(字体变蓝并加下划线)
au BufWinEnter * let w:m1=matchadd('Underlined', '\%<81v.\%>77v', -1)
" 启用每行超过80列的字符提示(字体变蓝并加下划线)
" au BufWinEnter * let w:m2=matchadd('Underlined', '\%>' . 80 . 'v.\+', -1)

" au FileType php setlocal dict+=$VIM/vimfiles/dict/php_funclist.dict
" au FileType css setlocal dict+=$VIM/vimfiles/dict/css.dict
" au FileType c setlocal dict+=$VIM/vimfiles/dict/c.dict
" au FileType cpp setlocal dict+=$VIM/vimfiles/dict/cpp.dict
" au FileType scale setlocal dict+=$VIM/vimfiles/dict/scale.dict
" au FileType javascript setlocal dict+=$VIM/vimfiles/dict/javascript.dict
" au FileType html setlocal dict+=$VIM/vimfiles/dict/javascript.dict
" au FileType html setlocal dict+=$VIM/vimfiles/dict/css.dict

if has("autocmd")
      autocmd BufReadPost *
          \ if line("'\"") > 0 && line("'\"") <= line("$") |
          \   exe "normal g`\"" |
          \ endif
endif

" 当打开vim且没有文件时自动打开NERDTree
" autocmd vimenter * if !argc() | NERDTree | endif

" 只剩 NERDTree时自动关闭
" autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTreeType") && b:NERDTreeType == "primary") | q | endif

" quickfix模式
" autocmd FileType c,cpp map <buffer> <leader><space> :w<cr>:make<cr>
" autocmd FileType python set omnifunc=pythoncomplete#Complete

" 常规模式下用空格键来开关光标行所在折叠(注:zR 展开所有折叠,zM 关闭所有折叠)
" nnoremap <space> @=((foldclosed(line('.')) < 0) ? 'zc' : 'zo')<CR>

" 常规模式下输入 cS 清除行尾空格
" nmap cS :%s/\s\+$//g<CR>:noh<CR>

" 常规模式下输入 cM 清除行尾 ^M 符号
" nmap cM :%s/\r$//g<CR>:noh<CR>

" Ctrl + K 插入模式下光标向上移动
" imap <c-k> <Up>

" Ctrl + J 插入模式下光标向下移动
" imap <c-j> <Down>

" Ctrl + H 插入模式下光标向左移动
" imap <c-h> <Left>

" Ctrl + L 插入模式下光标向右移动
" imap <c-l> <Right>

" 自动补全
"":inoremap ( ()<ESC>i
"":inoremap ) <c-r>=ClosePair(')')<CR>
"":inoremap { {<CR>}<ESC>O
"":inoremap } <c-r>=ClosePair('}')<CR>
"":inoremap [ []<ESC>i
"":inoremap ] <c-r>=ClosePair(']')<CR>
"":inoremap " ""<ESC>i
"":inoremap ' ''<ESC>i
""function! ClosePair(char)
""    if getline('.')[col('.') - 1] == a:char
""        return "\<Right>"
""    else
""        return a:char
""    endif
""endfunction

" inoremap ( ()<ESC>i
" inoremap [ []<ESC>i
" inoremap { {}<ESC>i
" inoremap < <><ESC>i

" < 自动补全 >
" let s:extfname = expand("%:e")
" if s:extfname ==?"cs"
"     set dictionary+=C:\work\unity3d\UnityCS.txt
"     set complete +=k
" endif
" 按键映射
" inoremap <C-k>             <C-X><C-k>"

"=============================================================
"%%. @end 自定义快捷键和配置
"=============================================================

"=============================================================
"%%'  @doc < 判断操作系统是否是 Windows 还是 Linux >
"=============================================================
let g:iswindows = 0
let g:islinux = 0
if(has("win32") || has("win64") || has("win95") || has("win16"))
    let g:iswindows = 1
else
    let g:islinux = 1
endif
"=============================================================
"%%.  @end < 判断操作系统是否是 Windows 还是 Linux >
"=============================================================

"=============================================================
"%%'  @doc < 判断是终端还是 Gvim >
"=============================================================
if has("gui_running")
    let g:isGUI = 1
else
    let g:isGUI = 0
endif
"=============================================================
"%%.  @end < 判断是终端还是 Gvim >
"=============================================================

"=============================================================
"%%'  @doc < 编码 >
"=============================================================
set encoding=utf-8                                 " 设置gvim内部编码,默认不更改
set fileencoding=utf-8                             " 设置当前文件编码,可以更改,如:gbk(同cp936)
set termencoding=utf-8
set fileencodings=ucs-bom,utf-8,gbk,cp936,latin-1  " 设置支持打开的文件的编码
" set fencs=utf-8,ucs-bom,shift-jis,gb18030,gbk,gb2312,cp936

if (g:iswindows && g:isGUI)
    source $VIMRUNTIME/vimrc_example.vim
    behave mswin
    "解决菜单乱码
    source $VIMRUNTIME/delmenu.vim
    source $VIMRUNTIME/menu.vim
    "解决console输出乱码
    language messages zh_CN.utf-8
    set langmenu=zh_CN.UTF-8
endif

" 显示中文帮助
if version >= 603
    set helplang=cn
    " set encoding=utf-8
endif
"=============================================================
"%%.  @end < 编码 >
"=============================================================

"=============================================================
"%%'  @doc 显示/隐藏菜单栏,工具栏,滚动条,可用 Ctrl + F11 切换
"=============================================================

" 菜单栏和工具栏隐藏和显示动态切换
" set guioptions-=T " 隐藏工具栏
" set guioptions-=r
" set guioptions-=L
" set guioptions-=m " 隐藏菜单栏

if g:isGUI
    set guioptions-=m
    set guioptions-=T
    set guioptions-=r
    set guioptions-=L
    nmap <silent> <c-F11> :if &guioptions =~# 'm' <Bar>
        \set guioptions-=m <Bar>
        \set guioptions-=T <Bar>
        \set guioptions-=r <Bar>
        \set guioptions-=L <Bar>
    \else <Bar>
        \set guioptions+=m <Bar>
        \set guioptions+=T <Bar>
        \set guioptions+=r <Bar>
        \set guioptions+=L <Bar>
    \endif<CR>
endif
"=============================================================
"%%.  @end 显示/隐藏菜单栏、工具栏、滚动条，可用 Ctrl + F11 切换
"=============================================================

"=============================================================
"%%'  @doc < Vundle 插件管理工具配置 >
"=============================================================
" 用于更方便的管理vim插件，具体用法参考 :h vundle 帮助
" Vundle工具安装方法为在终端输入如下命令
" git clone https://github.com/gmarik/vundle.git ~/.vim/bundle/vundle
set shell=/bin/bash
if g:islinux
    set rtp+=~/.vim/bundle/vundle/
    call vundle#rc()
else
    set rtp+=$VIM/vimfiles/bundle/vundle/
    call vundle#rc('$VIM/vimfiles/bundle/')
endif

" 使用Vundle来管理插件,这个必须要有.
" Bundle 'gmarik/vundle'

" 以下为要安装或更新的插件,不同仓库都有(具体书写规范请参考帮助)
" Bundle 'a.vim'
" Bundle 'Align'
" Bundle 'jiangmiao/auto-pairs'
" Bundle 'bufexplorer.zip'
" Bundle 'ccvext.vim'
" Bundle 'cSyntaxAfter'
" Bundle 'ctrlpvim/ctrlp.vim'
" Bundle 'mattn/emmet-vim'
" Bundle 'Yggdroot/indentLine'
" Bundle 'vim-javacompleteex'
" Bundle 'Mark--Karkat'
" Bundle 'Shougo/neocomplcache.vim'
" Bundle 'scrooloose/nerdcommenter'
" Bundle 'scrooloose/nerdtree'
" Bundle 'OmniCppComplete'
" Bundle 'Lokaltog/vim-powerline'
" Bundle 'repeat.vim'
" Bundle 'msanders/snipmate.vim'
" Bundle 'wesleyche/SrcExpl'
" Bundle 'std_c.zip'
" Bundle 'tpope/vim-surround'
" Bundle 'scrooloose/syntastic'
" Bundle 'majutsushi/tagbar'
" Bundle 'taglist.vim'
" Bundle 'TxtBrowser'
" Bundle 'ZoomWin'
" Bundle 'vimerl'

" vundle git sourse
Bundle 'https://github.com/onlychoice/vimerl.git'
Bundle 'https://github.com/vim-scripts/The-NERD-tree.git'
Bundle 'https://github.com/vim-scripts/taglist.vim.git'
Bundle 'https://github.com/vim-scripts/c.vim.git'
Bundle 'https://github.com/fugalh/desert.vim.git'
Bundle 'https://github.com/szw/vim-tags.git'
Bundle 'https://github.com/vim-scripts/OmniCppComplete.git'
Bundle 'https://github.com/vim-scripts/AutoComplPop.git'
Bundle 'https://github.com/vim-scripts/TxtBrowser.git'
Bundle 'https://github.com/vim-scripts/a.vim.git'
Bundle 'https://github.com/vim-scripts/nocompatible.vim.git'
Bundle 'https://github.com/fatih/vim-go.git'
"=============================================================
"%%.  @end < Vundle 插件管理工具配置 >
"=============================================================

"=============================================================
"%%' @doc 插件配置
"=============================================================

" Create a text highlighting style that always stands out...
highlight STANDOUT term=bold cterm=bold gui=bold

" < txtbrowser 插件配置 >
" 用于文本文件生成标签与与语法高亮(调用TagList插件生成标签,如果可以)
au BufRead,BufNewFile *.txt setlocal ft=txt

au BufRead,BufNewFile *.go set filetype=go

" < ZoomWin 插件配置 >
" 用于分割窗口的最大化与还原
" 常规模式下按快捷键 <c-w>o 在最大化与还原间切换

"  < ctags 工具配置 >
set tags=./tags;../tags;../../tags;../../../tags
" let Tlist_Ctags_Cmd='C:\cygwin\bin\ctags.exe'

" < TagList 插件配置 >
let Tlist_Show_One_File=1                   " 只显示当前文件的tags
let Tlist_Exit_OnlyWindow=1                 " 如果Taglist窗口是最后一个窗口则退出Vim
let Tlist_File_Fold_Auto_Close=1            " 自动折叠
let Tlist_Use_Right_Window=1                " 在右侧窗口中显示
let Tlist_Close_On_Select = 1
let Tlist_Enable_Fold_Column=0              " 使taglist插件不显示左边的折叠行
let Tlist_GainFocus_On_ToggleOpen = 1
let Tlist_Display_Prototype = 1
let Tlist_WinWidth=30                       " 设置窗口宽度
" 常规模式下输入 tl 调用插件,如果有打开 Tagbar 窗口则先将其关闭
nmap tl :TagbarClose<CR>:Tlist<CR>

" omnicppcomplete setting
set completeopt=menu,menuone        " 关闭预览窗口
let OmniCpp_MayCompleteDot = 1      " autocomplete with .
let OmniCpp_MayCompleteArrow = 1    " autocomplete with ->
let OmniCpp_MayCompleteScope = 1    " autocomplete with ::
let OmniCpp_SelectFirstItem = 2     " select first item (but don't insert)
let OmniCpp_NamespaceSearch = 2     " search namespaces in this and included files
let OmniCpp_ShowPrototypeInAbbr = 1 " show function prototype  in popup window
let OmniCpp_GlobalScopeSearch=1
let OmniCpp_DisplayMode=1
let OmniCpp_DefaultNamespaces=["std"]

"  < neocomplcache 插件配置 >
" 关键字补全\文件路径补全\tag补全等等,各种,非常好用,速度超快.
let g:neocomplcache_enable_at_startup = 1       " vim 启动时启用插件
" let g:neocomplcache_disable_auto_complete = 1 " 不自动弹出补全列表
" 在弹出补全列表后用 <c-p> 或 <c-n> 进行上下选择效果比较好

"  < nerdcommenter 插件配置 >
" 我主要用于C/C++代码注释(其它的也行)
" 以下为插件默认快捷键，其中的说明是以C/C++为例的，其它语言类似
" <Leader>ci 以每行一个 /* */ 注释选中行(选中区域所在行)，再输入则取消注释
" <Leader>cm 以一个 /* */ 注释选中行(选中区域所在行)，再输入则称重复注释
" <Leader>cc 以每行一个 /* */ 注释选中行或区域，再输入则称重复注释
" <Leader>cu 取消选中区域(行)的注释，选中区域(行)内至少有一个 /* */
" <Leader>ca 在/*...*/与//这两种注释方式中切换（其它语言可能不一样了）
" <Leader>cA 行尾注释
let NERDSpaceDelims = 1             " 在左注释符之后,右注释符之前留有空格

if &term=="xterm"
  set t_Co=8
  set t_Sb=^[[4%dm
  set t_Sf=^[[3%dm
endif

" < a.vim 插件配置 >
" 用于切换C/C++头文件
" :A     ---切换头文件并独占整个窗口
" :AV    ---切换头文件并垂直分割窗口
" :AS    ---切换头文件并水平分割窗口

" < BufExplorer 插件配置 >
" 快速轻松的在缓存中切换（相当于另一种多个文件间的切换方式）
" <Leader>be 在当前窗口显示缓存列表并打开选定文件
" <Leader>bs 水平分割窗口显示缓存列表，并在缓存列表窗口中打开选定文件
" <Leader>bv 垂直分割窗口显示缓存列表，并在缓存列表窗口中打开选定文件

" < cSyntaxAfter 插件配置 >
" 高亮括号与运算符等
au! BufRead,BufNewFile,BufEnter *.{c,cpp,h,java,javascript} call CSyntaxAfter()

"  < emmet-vim(前身为Zen coding) 插件配置 >
" HTML/CSS代码快速编写神器，详细帮助见 :h emmet.txt

"  < cscope 工具配置 >
" 用Cscope自己的话说 - "你可以把它当做是超过频的ctags"
if has("cscope")
    "设定可以使用 quickfix 窗口来查看 cscope 结果
    set cscopequickfix=s-,c-,d-,i-,t-,e-
    "使支持用 Ctrl+]  和 Ctrl+t 快捷键在代码间跳转
    set cscopetag
    "如果你想反向搜索顺序设置为1
    set csto=0
    "在当前目录中添加任何数据库
    if filereadable("cscope.out")
        cs add cscope.out
    "否则添加数据库环境中所指出的
    elseif $CSCOPE_DB != ""
        cs add $CSCOPE_DB
    endif
    set cscopeverbose
    "快捷键设置
    nmap <C-\>s :cs find s <C-R>=expand("<cword>")<CR><CR>
    nmap <C-\>g :cs find g <C-R>=expand("<cword>")<CR><CR>
    nmap <C-\>c :cs find c <C-R>=expand("<cword>")<CR><CR>
    nmap <C-\>t :cs find t <C-R>=expand("<cword>")<CR><CR>
    nmap <C-\>e :cs find e <C-R>=expand("<cword>")<CR><CR>
    nmap <C-\>f :cs find f <C-R>=expand("<cfile>")<CR><CR>
    nmap <C-\>i :cs find i ^<C-R>=expand("<cfile>")<CR>$<CR>
    nmap <C-\>d :cs find d <C-R>=expand("<cword>")<CR><CR>
endif

"=============================================================
"%%. @end 插件配置
"=============================================================

"=============================================================
"%%' @doc 函数定义
"=============================================================
" List of troublesome words...
let s:words = [
            \ "it's",  "its",
            \ "your",  "you're",
            \ "were",  "we're",   "where",
            \ "their", "they're", "there",
            \ "to",    "too",     "two"
            \ ]
" Build a Vim command to match troublesome words...
let s:words_matcher
            \ = 'match STANDOUT /\c\<\(' . join(s:words, '\|') . '\)\>/'
" Toggle word checking on or off...
function! WordCheck ()
    "Toggle the flag (or set it if it doesn't yet exist)...
    let w:check_words = exists('w:check_words') ? !w:check_words : 1
    "Turn match mechanism on/off, according to new state of flag...
    if w:check_words
        exec s:words_matcher
    else
        match none
    endif
endfunction
" Use ;p to toggle checking...
nmap <silent>  ;p  :call WordCheck()<CR>

" 在保存文件时自动去除无效空白，包括行尾空白和文件最后的空行
function RemoveTrailingWhitespace()
    if &ft != "diff"
        let b:curcol = col(".")
        let b:curline = line(".")
        silent! %s/\s\+$//
        silent! %s/\(\s*\n\)\+\%$//
        call cursor(b:curline, b:curcol)
    endif
endfunction
autocmd BufWritePre * call RemoveTrailingWhitespace()

" MyDiff
set diffexpr=MyDiff()
function! MyDiff()
    let opt = '-a --binary '
    if &diffopt =~ 'icase' | let opt = opt . '-i ' | endif
    if &diffopt =~ 'iwhite' | let opt = opt . '-b ' | endif
    let arg1 = v:fname_in
    if arg1 =~ ' ' | let arg1 = '"' . arg1 . '"' | endif
    let arg2 = v:fname_new
    if arg2 =~ ' ' | let arg2 = '"' . arg2 . '"' | endif
    let arg3 = v:fname_out
    if arg3 =~ ' ' | let arg3 = '"' . arg3 . '"' | endif
    let eq = ''
    if $VIMRUNTIME =~ ' '
        if &sh =~ '\<cmd'
            let cmd = '""' . $VIMRUNTIME . '\diff"'
            let eq = '"'
        else
            let cmd = substitute($VIMRUNTIME, ' ', '" ', '') . '\diff"'
        endif
    else
        let cmd = $VIMRUNTIME . '\diff'
    endif
    silent execute '!' . cmd . ' ' . opt . arg1 . ' ' . arg2 . ' > ' . arg3 . eq
endfunction

" C,C++ 按F5编译运行
map <F5> :call CompileRunGcc()<CR>
func! CompileRunGcc()
    exec "w"
    if &filetype == 'c'
        exec "!g++ % -o %<"
        exec "!time ./%<"
    elseif &filetype == 'cpp'
        exec "!g++ % -o %<"
        exec "!time ./%<"
    elseif &filetype == 'java'
        exec "!javac %"
        exec "!time java %<"
    elseif &filetype == 'sh'
        :!time bash %
    elseif &filetype == 'python'
        exec "!time python2.7 %"
    elseif &filetype == 'html'
        exec "!firefox % &"
    elseif &filetype == 'go'
        "        exec "!go build %<"
        exec "!time go run %"
    elseif &filetype == 'mkd'
        exec "!~/.vim/markdown.pl % > %.html &"
        "exec "!$VIM/vimfiles/markdown.pl % > %.html &"
        exec "!firefox %.html &"
    endif
endfunc
" C,C++的调试
map <F8> :call Rungdb()<CR>
func! Rungdb()
    exec "w"
    exec "!g++ % -g -o %<"
    exec "!gdb ./%<"
endfunc

" 代码格式优化化
map <F6> :call FormartSrc()<CR><CR>
" 定义FormartSrc()
func FormartSrc()
    exec "w"
    if &filetype == 'c'
        exec "!astyle --style=ansi -a --suffix=none %"
    elseif &filetype == 'cpp' || &filetype == 'hpp'
        exec "r !astyle --style=ansi --one-line=keep-statements -a --suffix=none %> /dev/null 2>&1"
    elseif &filetype == 'perl'
        exec "!astyle --style=gnu --suffix=none %"
    elseif &filetype == 'py'||&filetype == 'python'
        exec "r !autopep8 -i --aggressive %"
    elseif &filetype == 'java'
        exec "!astyle --style=java --suffix=none %"
    elseif &filetype == 'jsp'
        exec "!astyle --style=gnu --suffix=none %"
    elseif &filetype == 'xml'
        exec "!astyle --style=gnu --suffix=none %"
    else
        exec "normal gg=G"
        return
    endif
    exec "e! %"
endfunc
" 结束定义FormartSrc

" 新建.c,.h,.sh,.java文件,自动插入文件头
autocmd BufNewFile *.cpp,*.[ch],*.sh,*.rb,*.java,*.py exec ":call SetTitle()"
" 定义函数SetTitle,自动插入文件头
func SetTitle()
    "如果文件类型为.sh文件
    if &filetype == 'sh'
        call setline(1,"\#!/bin/bash")
        call append(line("."), "")
    elseif &filetype == 'python'
        call setline(1,"#!/usr/bin/env python")
        call append(line("."),"# coding=utf-8")
        call append(line(".")+1, "")
    elseif &filetype == 'ruby'
        call setline(1,"#!/usr/bin/env ruby")
        call append(line("."),"# encoding: utf-8")
        call append(line(".")+1, "")
    elseif &filetype == 'mkd'
        call setline(1,"<head><meta charset=\"UTF-8\"></head>")
    else
        call setline(1, "/*************************************************************************")
        call append(line("."), "	> File Name: ".expand("%"))
        call append(line(".")+1, "	> Author: ")
        call append(line(".")+2, "	> Mail: ")
        call append(line(".")+3, "	> Created Time: ".strftime("%c"))
        call append(line(".")+4, " ************************************************************************/")
        call append(line(".")+5, "")
    endif
    if expand("%:e") == 'cpp'
        call append(line(".")+6, "#include<iostream>")
        call append(line(".")+7, "using namespace std;")
        call append(line(".")+8, "")
    endif
    if &filetype == 'c'
        call append(line(".")+6, "#include<stdio.h>")
        call append(line(".")+7, "")
    endif
    if expand("%:e") == 'h'
        call append(line(".")+6, "#ifndef _".toupper(expand("%:r"))."_H")
        call append(line(".")+7, "#define _".toupper(expand("%:r"))."_H")
        call append(line(".")+8, "#endif")
    endif
    if &filetype == 'java'
        call append(line(".")+6,"public class ".expand("%:r"))
        call append(line(".")+7,"")
    endif
    " 新建文件后,自动定位到文件末尾
endfunc
autocmd BufNewFile * normal G

"=============================================================
"%%. @end 函数定义
"=============================================================

" vim: set foldmethod=marker filetype=vim foldmarker=%%',%%.:
