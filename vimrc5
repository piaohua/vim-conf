" Configuration file for vim
set modelines=0		" CVE-2007-2438

" Normally we use vim-extensions. If you want true vi-compatibility
" remove change the following statements
set nocompatible	" Use Vim defaults instead of 100% vi compatibility
set backspace=2		" more powerful backspacing

" Don't write backup file if vim is being called by "crontab -e"
au BufWrite /private/tmp/crontab.* set nowritebackup nobackup
" Don't write backup file if vim is being called by "chpass"
au BufWrite /private/etc/pw.* set nowritebackup nobackup


"=============================================================
"%%'  @doc < Vundle 插件管理工具配置 >
"=============================================================
filetype off
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()

Plugin 'VundleVim/Vundle.vim'

" set nocompatible              " be iMproved, required
" filetype off                  " required

" let Vundle manage Vundle, required
" Plugin 'VundleVim/Vundle.vim'

" The following are examples of different formats supported.
" Keep Plugin commands between vundle#begin/end.
" plugin on GitHub repo
" Plugin 'tpope/vim-fugitive'

" plugin from http://vim-scripts.org/vim/scripts.html
" Plugin 'L9'

" Git plugin not hosted on GitHub
" Plugin 'git://git.wincent.com/command-t.git'

" git repos on your local machine (i.e. when working on your own plugin)
" Plugin 'file:///home/gmarik/path/to/plugin'

" The sparkup vim script is in a subdirectory of this repo called vim.
" Pass the path to set the runtimepath properly.
" Plugin 'rstacruz/sparkup', {'rtp': 'vim/'}

" Install L9 and avoid a Naming conflict if you've already installed a
" different version somewhere else.
" Plugin 'ascenator/L9', {'name': 'newL9'}

" All of your Plugins must be added before the following line
" call vundle#end()            " required
" filetype plugin indent on    " required
" To ignore plugin indent changes, instead use:
" filetype plugin on
"
" Brief help
" :PluginList       - lists configured plugins
" :PluginInstall    - installs plugins; append `!` to update or just :PluginUpdate
" :PluginSearch foo - searches for foo; append `!` to refresh local cache
" :PluginClean      - confirms removal of unused plugins; append `!` to auto-approve removal
"
" see :h vundle for more details or wiki for FAQ
" Put your non-Plugin stuff after this line
Plugin 'scrooloose/nerdtree'
Plugin 'onlychoice/vimerl'
Plugin 'fatih/vim-go'
Plugin 'fatih/molokai'
Plugin 'scrooloose/syntastic'
Plugin 'Shougo/neocomplcache.vim'
Plugin 'asins/vim-dict'
Plugin 'OmniCppComplete'
Plugin 'AutoComplPop'
Plugin 'taglist.vim'
Plugin 'dgryski/vim-godef'
Plugin 'Blackrush/vim-gocode'
Plugin 'majutsushi/tagbar'
Plugin 'AndrewRadev/splitjoin.vim'
Plugin 'ctrlpvim/ctrlp.vim'
Plugin 'jiangmiao/auto-pairs'
Plugin 'pangloss/vim-javascript'
Plugin 'uguu-org/vim-matrix-screensaver'
" Plugin 'Valloric/YouCompleteMe'

call vundle#end()

execute pathogen#infect()
filetype plugin indent on
filetype plugin on
filetype on

"=============================================================
"%%.  @end < Vundle 插件管理工具配置 >
"=============================================================

"=============================================================
"%%' @doc 基础配置
"=============================================================
syntax on                       " 打开关键字色
" colorscheme murphy              " 配色方案 desert | murphy
set completeopt=preview,menu    " 代码补全
set autoread                    " 设置当文件被改动时自动载入
set autochdir                   " 自动目录
" set cursorline                  " 突出显示当前行
" set cursorcolumn                " 高亮纵向行
set hlsearch                    " 高亮搜索
set tabstop=4                   " Tab键的宽度
set softtabstop=4               " 统一缩进为4
set shiftwidth=4                " 统一缩进为4
set autoindent                  " 自动缩进
set smartindent                 " 启用智能对齐方式
set list                        " 显示特殊字符,其中Tab使用高亮竖线代替,尾部空白使用高亮点号代替
set listchars=tab:\|\ ,trail:.  " 显示特殊字符,其中Tab使用高亮竖线代替,尾部空白使用高亮点号代替
set expandtab                   " 将Tab自动转化成空格 [需要输入真正的Tab键时，使用 Ctrl+V + Tab]
set whichwrap+=<,>,h,l          " 允许backspace和光标键跨越行边界
set mouse=a                     " 在任何模式下启用鼠标
set clipboard+=unnamed          " 共享剪贴板
set nobackup                    " 设置无备份文件
set wildmenu                    " 命令行自动完成
set guifont=Fixedsys            " 设置字体
set ruler                       " 显示标尺,在右下角显示光标位置的状态行
set rulerformat=%15(%c%V\ %p%%%)
set showcmd                     " 输入的命令显示出来,看的清楚些
set number                      " 显示行号
set iskeyword+=_,$,@,%,#,-      " 带有如下符号的单词不要被换行分割
set foldenable                  " 开启折叠
set foldmethod=manual           " 手动折叠 manual | indent | marker
set showmatch                   " 高亮显示匹配的括号
set matchtime=1                 " 匹配括号高亮的时间（单位是十分之一秒）
" " 标签页
" set tabpagemax=20   "最多20个标签
" set showtabline=2   "总是显示标签栏

" 设置底部状态栏显示
set statusline=%20*\%f%h%=%-14.(%l,%c%V%)\ %<%p%%\ \ \ [%L]\ \ \ %{strftime('%y-%m-%d\ %A')}
" 重新打开文件,光标停留在上次编辑的地方
au BufReadPost * if line("'\"") > 0|if line("'\"") <= line("$")|exe("norm '\"")|else|exe "norm $"|endif|endif
" 启用每行超过77-80列的字符提示(字体变蓝并加下划线)
au BufWinEnter * let w:m1=matchadd('Underlined', '\%<81v.\%>77v', -1)

"=============================================================
"%%. @end 基础配置
"=============================================================

"=============================================================
"%%' @doc 自定义快捷键和配置
"=============================================================
lcd $HOME/data/golang
nmap ;lt :NERDTree       $HOME/data<CR>
nmap ;lg :NERDTree       $HOME/data/golang<CR>
nmap ;ln :NERDTreeMirror<CR>
" nmap ;me :!make.bat<CR>
" nmap ;st :!start_cc.bat<CR>
" nmap ;cc :!commit_code.bat<CR>
" nmap ;cd :!commit_doc.bat<CR>
" nmap ;uu :!update.bat<CR>
" nmap ;dd :!download_data.bat<CR>
" nmap ;d1 :!download_data1.bat<CR>
nmap ;vim :e ~/.vimrc<CR>
nmap ;tn :tabn<CR>
nmap ;tp :tabp<CR>
nmap ;tl :tabl<CR>
nmap ;te :tabe<CR>
nmap ;tc :tabc<CR>
nmap ;tf :tabfir<CR>
nmap ;bs :buffers<CR>
nmap ;bn :bn<CR>
nmap ;bp :bp<CR>
nmap ;bd :bd<CR>
nmap ;bq :q<CR>
nmap ;no :nohl<CR>
nmap ;tag :TlistToggle<CR>
nmap ;sv :source ~/.vimrc<CR>
nmap ;ma :Matrix<CR>

" 窗口切换快捷键
nmap <c-j> <c-w>j
nmap <c-k> <c-w>k
nmap <c-h> <c-w>h
nmap <c-l> <c-w>l

" ;16  十六进制格式查看
" ;r16 返回普通格式
nmap ;16 :%!xxd<CR>
nmap ;r16 :%!xxd -r<CR>

" 在插入模式下移动光标
" inoremap <C-b> <Left>
" inoremap <C-f> <Right>

" 常规模式下输入 cS 清除行尾空格
nmap cS :%s/\s\+$//g<CR>:noh<CR>

" 常规模式下输入 cM 清除行尾 ^M 符号
nmap cM :%s/\r$//g<CR>:noh<CR>

" Ctrl + K 插入模式下光标向上移动
imap <c-k> <Up>

" Ctrl + J 插入模式下光标向下移动
imap <c-j> <Down>

" Ctrl + H 插入模式下光标向左移动
imap <c-h> <Left>

" Ctrl + L 插入模式下光标向右移动
imap <c-l> <Right>

" 将tab替换为空格
nmap tt :%s/\t/    /g<CR>
if has("autocmd")
      autocmd BufReadPost *
          \ if line("'\"") > 0 && line("'\"") <= line("$") |
          \   exe "normal g`\"" |
          \ endif
endif

" NERDTree配置
" 定义<F2>开启/关闭NERDTree
nmap <F2> :NERDTree<CR>
" 定义<F3>开启/关闭行号显示
nmap <F3> :set nonumber!<CR>:set foldcolumn=0<CR>
" 去空行
nnoremap <F4> :g/^\s*$/d<CR>
let NERDTreeShowBookmarks=1 "显示书签
let NERDTreeDirArrows=0 "目录箭头 1显示箭头 0传统+-|号

"=============================================================
"%%. @end 自定义快捷键和配置
"=============================================================


"=============================================================
"%%' @doc 插件配置
"=============================================================

" -- OmniCppComplete setting --
set completeopt=menu,menuone        " 关闭预览窗口
let OmniCpp_MayCompleteDot = 0 " autocomplete with .
let OmniCpp_MayCompleteArrow = 1 " autocomplete with ->
let OmniCpp_MayCompleteScope = 1 " autocomplete with ::
let OmniCpp_SelectFirstItem = 2 " select first item (but don't insert)
let OmniCpp_NamespaceSearch = 2 " search namespaces in this and included files
let OmniCpp_ShowPrototypeInAbbr = 1 " show function prototype  in popup window
let OmniCpp_GlobalScopeSearch=1
let OmniCpp_DisplayMode=1
let OmniCpp_DefaultNamespaces=["std"]

" < neocomplcache 插件配置 >
let g:neocomplcache_enable_at_startup = 1       " vim 启动时启用插件

" Syntastic 开启打开文件很慢
execute pathogen#infect()
set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*
let g:syntastic_check_on_open = 1
let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_wq = 1
"=============================================================
"%%. @end 插件配置
"=============================================================

"=============================================================
"%%' @doc 函数定义
"=============================================================
" " 获取当前目录
" func GetPWD()
"     return substitute(getcwd(), "", "", "g")
" endf
" " 命令行于状态行
" set ch=1
" set stl=\ [File]\ %F%m%r%h%y[%{&fileformat},%{&fileencoding}]\ %w\ \ [PWD]\ %r%{GetPWD()}%h\ %=\ [Line]\ %l,%c\ %=\ %P 
" set ls=2    "始终显示状态行

" 返回当前时间
func! GetTimeInfo()
    return strftime('%Y-%m-%d %H:%M:%S')
    "return strftime('%Y-%m-%d')
endfunction

" 插入模式按 Ctrl + D(ate) 插入当前时间
imap <C-d> <C-r>=GetTimeInfo()<cr>

" =====================
" AutoCmd 自动运行
" =====================
if has("autocmd")

    " 匹配配对的字符
    func! MatchingQuotes()
        inoremap ( ()<left>
        inoremap [ []<left>
        inoremap { {}<left>
        inoremap " ""<left>
        inoremap ' ''<left>
    endf

    " 括号自动补全
    func! AutoClose()
        :inoremap ( ()<ESC>i
        :inoremap " ""<ESC>i
        :inoremap ' ''<ESC>i
        :inoremap { {}<ESC>i
        :inoremap [ []<ESC>i
        :inoremap ) <c-r>=ClosePair(')')<CR>
        :inoremap } <c-r>=ClosePair('}')<CR>
        :inoremap ] <c-r>=ClosePair(']')<CR>
    endf

    func! ClosePair(char)
        if getline('.')[col('.') - 1] == a:char
            return "\<Right>"
        else
            return a:char
        endif
    endf

    augroup vimrcEx     "记住上次文件位置
        au!
        autocmd FileType text setlocal textwidth=80
        autocmd BufReadPost *
                    \ if line("'\"") > 0 && line("'\"") <= line("$") |
                    \   exe "normal g`\"" |
                    \ endif
    augroup END

    " Auto close quotation marks for PHP, Javascript, etc, file
    " au FileType go,erl,php,javascript,lua,python exe AutoClose()
    " au FileType go,erl,php,javascript,lua,python exe MatchingQuotes()

    " Auto Check Syntax
    au BufWritePost,FileWritePost *.js,*.php call CheckSyntax(1)

    " JavaScript 语法高亮
    au FileType html,javascript let g:javascript_enable_domhtmlcss = 1
    au BufRead,BufNewFile *.js setf jquery
    
    " 打开javascript对dom、html和css的支持
    let javascript_enable_domhtmlcss=1

    let s:dict_dir = $HOME."/.vim/bundle/vim-dict/dict/"
    let s:dict_dir = "setlocal dict+=".s:dict_dir

    au FileType php exec s:dict_dir."php_funclist.dict"
    au FileType python exec s:dict_dir."python.dict"
    au FileType css exec s:dict_dir."css.dict"
    au FileType javascript exec s:dict_dir."javascript.dict"
    au FileType sh exec s:dict_dir."sh.dict"

    " 增加 ActionScript 语法支持
    " au BufNewFile,BufRead,BufEnter,WinEnter,FileType *.as setf actionscript 

    " CSS3 语法支持
    " au BufRead,BufNewFile *.css set ft=css syntax=css3

    " 增加 Objective-C 语法支持
    " au BufNewFile,BufRead,BufEnter,WinEnter,FileType *.m,*.h setf objc

    " 将指定文件的换行符转换成 UNIX 格式
    " au FileType php,javascript,html,css,python,vim,vimwiki set ff=unix

    " 保存编辑状态
    au BufWinLeave * if expand('%') != '' && &buftype == '' | mkview | endif
    au BufRead     * if expand('%') != '' && &buftype == '' | silent loadview | endif
endif

"=============================================================
"%%. @end 函数定义
"=============================================================

" vim: set foldmethod=marker filetype=vim foldmarker=%%',%%.:


" A sensible vimrc for Go development
"
" Please note that the following settings are some default that I used 
" for years. However it might be not the case for you (and your
" environment). I highly encourage to change/adapt the vimrc to your own
" needs. Think of a vimrc as a garden that needs to be maintained and fostered
" throughout years. Keep it clean and useful - Fatih Arslan

call plug#begin()
" Plug 'fatih/vim-go'
" Plug 'fatih/molokai'
" Plug 'AndrewRadev/splitjoin.vim'
" Plug 'ctrlpvim/ctrlp.vim'
call plug#end()

""""""""""""""""""""""
"      Settings      "
""""""""""""""""""""""
" filetype off                    " Reset filetype detection first ...
" filetype plugin indent on       " ... and enable filetype detection
set ttyfast                     " Indicate fast terminal conn for faster redraw
set ttymouse=xterm2             " Indicate terminal type for mouse codes
set ttyscroll=3                 " Speedup scrolling
set laststatus=2                " Show status line always
set encoding=utf-8              " Set default encoding to UTF-8
set backspace=indent,eol,start  " Makes backspace key more powerful.
set incsearch                   " Shows the match while typing
set noerrorbells                " No beeps
set noswapfile                  " Don't use swapfile
set splitright                  " Vertical windows should be split to right
set splitbelow                  " Horizontal windows should split to bottom
set autowrite                   " Automatically save before :next, :make etc.
set hidden                      " Buffer should still exist if window is closed
set fileformats=unix,dos,mac    " Prefer Unix over Windows over OS 9 formats
set noshowmatch                 " Do not show matching brackets by flickering
set noshowmode                  " We show the mode with airline or lightline
" set ignorecase                  " Search case insensitive...
set smartcase                   " ... but not it begins with upper case 
" set completeopt=menu,menuone    " Show popup menu, even if there is one entry
set pumheight=10                " Completion window max size
set nocursorcolumn              " Do not highlight column (speeds up highlighting)
set nocursorline                " Do not highlight cursor (speeds up highlighting)
set lazyredraw                  " Wait to redraw

" Enable to copy to clipboard for operations like yank, delete, change and put
" http://stackoverflow.com/questions/20186975/vim-mac-how-to-copy-to-clipboard-without-pbcopy
if has('unnamedplus')
  set clipboard^=unnamed
  set clipboard^=unnamedplus
endif

" This enables us to undo files even if you exit Vim.
if has('persistent_undo')
  set undofile
  set undodir=~/.config/vim/tmp/undo//
endif

" Colorscheme
syntax enable
set t_Co=256
let g:rehash256 = 1
let g:molokai_original = 1
colorscheme molokai

""""""""""""""""""""""
"      Mappings      "
""""""""""""""""""""""

" Set leader shortcut to a comma ','. By default it's the backslash
let mapleader = ","

" Jump to next error with Ctrl-n and previous error with Ctrl-p. Close the
" quickfix window with <leader>a
map <C-n> :cnext<CR>
map <C-m> :cprevious<CR>
nnoremap <leader>a :cclose<CR>

" Visual linewise up and down by default (and use gj gk to go quicker)
noremap <Up> gk
noremap <Down> gj
noremap j gj
noremap k gk

" Search mappings: These will make it so that going to the next one in a
" search will center on the line it's found in.
nnoremap n nzzzv
nnoremap N Nzzzv

" Act like D and C
nnoremap Y y$

" Enter automatically into the files directory
autocmd BufEnter * silent! lcd %:p:h


"""""""""""""""""""""
"      Plugins      "
"""""""""""""""""""""

" vim-go
let g:go_fmt_command = "goimports"
let g:go_autodetect_gopath = 1
let g:go_list_type = "quickfix"

let g:go_highlight_types = 1
let g:go_highlight_fields = 1
let g:go_highlight_functions = 1
let g:go_highlight_methods = 1
let g:go_highlight_extra_types = 1
let g:go_highlight_generate_tags = 1

" Open :GoDeclsDir with ctrl-g
nmap <C-g> :GoDeclsDir<cr>
imap <C-g> <esc>:<C-u>GoDeclsDir<cr>

augroup go
  autocmd!

  " Show by default 4 spaces for a tab
  autocmd BufNewFile,BufRead *.go setlocal noexpandtab tabstop=4 shiftwidth=4 

  " :GoBuild and :GoTestCompile
  autocmd FileType go nmap <leader>b :<C-u>call <SID>build_go_files()<CR>

  " :GoTest
  autocmd FileType go nmap <leader>t  <Plug>(go-test)

  " :GoRun
  autocmd FileType go nmap <leader>r  <Plug>(go-run)

  " :GoDoc
  autocmd FileType go nmap <Leader>d <Plug>(go-doc)

  " :GoCoverageToggle
  autocmd FileType go nmap <Leader>c <Plug>(go-coverage-toggle)

  " :GoInfo
  autocmd FileType go nmap <Leader>i <Plug>(go-info)

  " :GoMetaLinter
  autocmd FileType go nmap <Leader>l <Plug>(go-metalinter)

  " :GoDef but opens in a vertical split
  autocmd FileType go nmap <Leader>v <Plug>(go-def-vertical)
  " :GoDef but opens in a horizontal split
  autocmd FileType go nmap <Leader>s <Plug>(go-def-split)

  " :GoAlternate  commands :A, :AV, :AS and :AT
  autocmd Filetype go command! -bang A call go#alternate#Switch(<bang>0, 'edit')
  autocmd Filetype go command! -bang AV call go#alternate#Switch(<bang>0, 'vsplit')
  autocmd Filetype go command! -bang AS call go#alternate#Switch(<bang>0, 'split')
  autocmd Filetype go command! -bang AT call go#alternate#Switch(<bang>0, 'tabe')
augroup END

" build_go_files is a custom function that builds or compiles the test file.
" It calls :GoBuild if its a Go file, or :GoTestCompile if it's a test file
function! s:build_go_files()
  let l:file = expand('%')
  if l:file =~# '^\f\+_test\.go$'
    call go#cmd#Test(0, 1)
  elseif l:file =~# '^\f\+\.go$'
    call go#cmd#Build(0)
  endif
endfunction


" set runtimepath=~/.vim,~/.vim/bundle/auto-pairs,~/.vim/bundle/AutoComplPop,~/.vim/bundle/ctrlp.vim,~/.vim/bundle/molokai,~/.vim/bundle/neocomplcache.vim,~/.vim/bundle/nerdtree,~/.vim/bundle/OmniCppComplete,~/.vim/bundle/splitjoin.vim,~/.vim/bundle/syntastic,~/.vim/bundle/tagbar,~/.vim/bundle/taglist.vim,~/.vim/bundle/vim-dict,~/.vim/bundle/vim-go,~/.vim/bundle/vim-gocode,~/.vim/bundle/vim-godef,~/.vim/bundle/vim-javascript,~/.vim/bundle/vimerl,~/.vim/bundle/Vundle.vim,/usr/local/share/vim/vimfiles,/usr/local/share/vim/vim80,/usr/local/share/vim/vimfiles/after,~/.vim/bundle/vim-javascript/after,~/.vim/bundle/OmniCppComplete/after,~/.vim/after,~/.vim/bundle/Vundle.vim/after,~/.vim/bundle/nerdtree/after,~/.vim/bundle/vimerl/after,~/.vim/bundle/vim-go/after,~/.vim/bundle/molokai/after,~/.vim/bundle/syntastic/after,~/.vim/bundle/neocomplcache.vim/after,~/.vim/bundle/vim-dict/after,~/.vim/bundle/AutoComplPop/after,~/.vim/bundle/taglist.vim/after,~/.vim/bundle/vim-godef/after,~/.vim/bundle/vim-gocode/after,~/.vim/bundle/tagbar/after,/usr/local/Cellar/vim/8.0.0002/share/vim/vim80
